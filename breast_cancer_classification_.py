# -*- coding: utf-8 -*-
"""Breast Cancer Classification .ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1kVwuP3neMzZlI0lhR_s3s2qbM60Eayv2

Import dependeacies
"""

import numpy as np
import pandas as pd
import sklearn.datasets
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import  accuracy_score

#loading the data from sklearn
breast_cancer_dataset = sklearn.datasets.load_breast_cancer()

print(breast_cancer_dataset)

# loading the data to a data frame
data_frame = pd.DataFrame(breast_cancer_dataset.data, columns=breast_cancer_dataset.feature_names)

data_frame.head()

#add target column to the data frame
data_frame['label'] = breast_cancer_dataset.target

data_frame.head()

data_frame.shape

#information about dataset
data_frame.info()

#checking number of null values
data_frame.isnull().sum()

#statistical measures about dataset
data_frame.describe()

#checking distribution of target values
data_frame['label'].value_counts()

"""1 --> Benign

0  --> Malignant
"""

data_frame.groupby('label').mean()

x = data_frame.drop(columns='label', axis=1)
y = data_frame['label']

print(x)

print(y)

"""Splitting data into training and testing

"""

x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state=5)

print(x.shape, x_train.shape, x_test.shape)

"""Model training

Logistic regression
"""

model = LogisticRegression()

#training the Logistic Regression Model use training data

model.fit(x_train, y_train)

"""Model Evaluation"""

# accuracy on training data
x_train_prediction = model.predict(x_train)
training_data_accuracy = accuracy_score(y_train, x_train_prediction)

print('Accuracy score on train data: ', training_data_accuracy)

# accuracy on testing data
x_test_prediction = model.predict(x_test)
testing_data_accuracy = accuracy_score(y_test, x_test_prediction)

print('Accuracy score on test data: ', testing_data_accuracy)

"""Build a prediction system"""

input_data = (13.54,14.36,87.46,566.3,0.09779,0.08129,0.06664,0.04781,0.1885,0.05766,0.2699,0.7886,2.058,23.56,0.008462,0.0146,0.02387,0.01315,0.0198,0.0023,15.11,19.26,99.7,711.2,0.144,0.1773,0.239,0.1288,0.2977,0.07259)

# change the input data to a numpy array
input_data_as_numpy_array = np.asarray(input_data)

#change the input array as we predict for one datapoint
input_data_reshaped = input_data_as_numpy_array.reshape(1,-1)

prediction = model.predict(input_data_reshaped)
print(prediction)

if(prediction[0] == 0):
  print('The Breast Cancer is Malignant')
else:
  print('The Breast Cancer is Benign')

